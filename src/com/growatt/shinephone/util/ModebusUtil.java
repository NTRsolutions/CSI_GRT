package com.growatt.shinephone.util;

public class ModebusUtil {
	
		  public static final String toHex(byte[] data) {
		    return toHex(data, 0, data.length);
		  }//toHex
		 
		  public static final String toHex(byte[] data, int off, int length) {
		    //double size, two bytes (hex range) for one byte
		    StringBuffer buf = new StringBuffer(data.length * 2);
		    for (int i = off; i < length; i++) {
		      //don't forget the second hex digit
		      if (((int) data[i] & 0xff) < 0x10) {
		        buf.append("0");
		      }
		      buf.append(Long.toString((int) data[i] & 0xff, 16));
		      if (i < data.length - 1) {
		        buf.append(" ");
		      }
		    }
		    return buf.toString();
		  }//toHex


		  public static final byte[] toHex(int i) {
		    StringBuffer buf = new StringBuffer(2);
		    //don't forget the second hex digit
		    if (((int) i & 0xff) < 0x10) {
		      buf.append("0");
		    }
		    buf.append(Long.toString((int) i & 0xff, 16).toUpperCase());
		    return buf.toString().getBytes();
		  }//toHex


		  public static final int registerToUnsignedShort(byte[] bytes) {
		    return ((bytes[0] & 0xff) << 8 | (bytes[1] & 0xff));
		  }//registerToUnsignedShort
		 


		  public static final byte[] unsignedShortToRegister(int v) {
		    byte[] register = new byte[2];
		    register[0] = (byte) (0xff & (v >> 8));
		    register[1] = (byte) (0xff & v);
		    return register;
		  }//unsignedShortToRegister
		 


		  public static final short registerToShort(byte[] bytes) {
		    return (short) ((bytes[0] << 8) | (bytes[1] & 0xff));
		  }//registerToShort
		 


		  public static final short registerToShort(byte[] bytes, int idx) {
		    return (short) ((bytes[idx] << 8) | (bytes[idx + 1] & 0xff));
		  }//registerToShort


		  public static final byte[] shortToRegister(short s) {
		    byte[] register = new byte[2];
		    register[0] = (byte) (0xff & (s >> 8));
		    register[1] = (byte) (0xff & s);
		    return register;
		  }//shortToRegister


		  public static final int registersToInt(byte[] bytes) {
		    return (
		        ((bytes[0] & 0xff) << 24) |
		        ((bytes[1] & 0xff) << 16) |
		        ((bytes[2] & 0xff) << 8) |
		        (bytes[3] & 0xff)
		        );
		  }//registersToInt

		  public static final byte[] intToRegisters(int v) {
		    byte[] registers = new byte[4];
		    registers[0] = (byte) (0xff & (v >> 24));
		    registers[1] = (byte) (0xff & (v >> 16));
		    registers[2] = (byte) (0xff & (v >> 8));
		    registers[3] = (byte) (0xff & v);
		    return registers;
		  }//intToRegisters
		 


		  public static final long registersToLong(byte[] bytes) {
		    return (
		        (((long) (bytes[0] & 0xff) << 56) |
		        ((long) (bytes[1] & 0xff) << 48) |
		        ((long) (bytes[2] & 0xff) << 40) |
		        ((long) (bytes[3] & 0xff) << 32) |
		        ((long) (bytes[4] & 0xff) << 24) |
		        ((long) (bytes[5] & 0xff) << 16) |
		        ((long) (bytes[6] & 0xff) << 8) |
		        ((long) (bytes[7] & 0xff)))
		        );
		  }//registersToLong

		  public static final byte[] longToRegisters(long v) {
		    byte[] registers = new byte[8];
		    registers[0] = (byte) (0xff & (v >> 56));
		    registers[1] = (byte) (0xff & (v >> 48));
		    registers[2] = (byte) (0xff & (v >> 40));
		    registers[3] = (byte) (0xff & (v >> 32));
		    registers[4] = (byte) (0xff & (v >> 24));
		    registers[5] = (byte) (0xff & (v >> 16));
		    registers[6] = (byte) (0xff & (v >> 8));
		    registers[7] = (byte) (0xff & v);
		    return registers;
		  }//longToRegisters
		 
		
		  public static final float registersToFloat(byte[] bytes) {
		    return Float.intBitsToFloat((
		        ((bytes[0] & 0xff) << 24) |
		        ((bytes[1] & 0xff) << 16) |
		        ((bytes[2] & 0xff) << 8) |
		        (bytes[3] & 0xff)
		        ));
		  }//registersToFloat
		 
	
		  public static final byte[] floatToRegisters(float f) {
		    return intToRegisters(Float.floatToIntBits(f));
		  }//floatToRegisters
		 
		
		  public static final double registersToDouble(byte[] bytes) {
		    return Double.longBitsToDouble((
		        (((long) (bytes[0] & 0xff) << 56) |
		        ((long) (bytes[1] & 0xff) << 48) |
		        ((long) (bytes[2] & 0xff) << 40) |
		        ((long) (bytes[3] & 0xff) << 32) |
		        ((long) (bytes[4] & 0xff) << 24) |
		        ((long) (bytes[5] & 0xff) << 16) |
		        ((long) (bytes[6] & 0xff) << 8) |
		        ((long) (bytes[7] & 0xff)))
		        ));
		  }//registersToDouble
		 
		 
		  public static final byte[] doubleToRegisters(double d) {
		    return longToRegisters(Double.doubleToLongBits(d));
		  }//doubleToRegisters
		 
		  public static final int unsignedByteToInt(byte b) {
		    return (int) b & 0xFF;
		  }//unsignedByteToInt
		 
		  /**
		   * Returs the low byte of an integer word.
		   *
		   * @param wd
		   * @return
		   */
		  public static final byte lowByte(int wd) {
		    return (new Integer(0xff & wd).byteValue());
		  }// lowByte
		 
		  /**
		   *
		   * @param wd
		   * @return
		   */
		  public static final byte hiByte(int wd) {
		    return (new Integer(0xff & (wd >> 8)).byteValue());
		  }// hiByte
		 
		  /**
		   *
		   * @param hibyte
		   * @param lowbyte
		   * @return
		   */
		  public static final int makeWord(int hibyte, int lowbyte) {
		    int hi = 0xFF & hibyte;
		    int low = 0xFF & lowbyte;
		    return ((hi << 8) | low);
		  }// makeWord
		 
		  public static final int[] calculateCRC(byte[] data, int offset, int len) {
		 
		    int[] crc = {0xFF, 0xFF};
		    int nextByte = 0;
		    int uIndex; 
		    for (int i = offset; i < len && i < data.length; i++) {
		      nextByte = 0xFF & ((int) data[i]);
		      uIndex = crc[0] ^ nextByte; //
		      crc[0] = crc[1] ^ auchCRCHi[uIndex];
		      crc[1] = auchCRCLo[uIndex];
		    }
		    return crc;
		  }
		  public static int getFuncCode(byte [] data){
			  return data[1];
		  }
		  public static int getAddress(byte [] data){
			  return data[0];
		  }
		  private final static short[] auchCRCHi = {
		    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
		    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
		    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
		    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
		    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
		    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
		    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
		    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
		    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
		    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
		  };
		 
		 
		  private final static short[] auchCRCLo = {
		    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
		    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
		    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
		    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
		    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
		    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
		    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
		    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
		    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
		    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
		    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
		    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
		    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
		    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
		    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
		    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
		    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
		    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
		    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
		    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
		    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
		    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
		    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
		    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
		    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
		    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
		  };
		  
}
